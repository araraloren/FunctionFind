"functionfind, [ff]:\n"	\
"\n"	\
"[ff] [type switch] [files] [switch] [option] [function signature]\n"	\
"\n"	\
"--files may be from std input \n"	\
"\n"	\
"type switch:\n"	\
"	-f => function,\n"	\
"	-d => declare\n"	\
"\n"	\
"files:\n"	\
"	./ -e cpp,h => directory, extension name filter\n"	\
"	./something.[cpp, cxx, c++] => cpp file,\n"	\
"	./something.[h, hpp] => cpp header,\n"	\
"	./something.[c] => c file\n"	\
"	\n"	\
"switch:\n"	\
"	-i, --ignore-case => ignore case,\n"	\
"	-r, --recursive => recursive find directory,\n"	\
"	-f, --print-filename => print file name,\n"	\
"	-n, --print-linenum => print line number,\n"	\
"	-o, --print-offset => print offset of whole file,\n"	\
"	-c, --print-column => print column number,\n"	\
"	-h, --help => print help of [ff],\n"	\
"	-v, --version => print version of [ff],\n"	\
"	-t, --only-count => only print match count, [will forbidden -n -o -c, but you can use -f]\n"	\
"	\n"	\
"option:\n"	\
"	-S, --start-time => start time limit of file\n"	\
"	[\n"	\
"		1449582574 -> long integer time\n"	\
"		2015:12:08 21:50:24 -> string format\n"	\
"	],\n"	\
"	-E, --end-time => end time of file\n"	\
"	[\n"	\
"		same as --start-time\n"	\
"	],\n"	\
"	-J, --thread => use multi thread\n"	\
"	[\n"	\
"		4 -> a integer number\n"	\
"	],\n"	\
"	-A, --clang-args => set clang's arg parse c/c++ source file\n"	\
"	[\n"	\
"		default clang's parse arg are 'c++ -x -std=c++11' \n"	\
"	],\n"	\
"	-C, --class => specify class name\n"	\
"	[\n"	\
"		class name\n"	\
"	],\n"	\
"	-T, --struct => specify struct name\n"	\
"	[\n"	\
"		struct name\n"	\
"	]\n"	\
"	\n"	\
"function signature:\n"	\
"	return-type name(type name, ...)  ---> full signature\n"	\
"		return-type name(type, ...),  ---> ignore args name\n"	\
"			name(type, ...),  		---> ignore return type\n"	\
"			void name(type, ...), 	---> specify return type as void\n"	\
"			return-type (type, ...), 	---> ignore function name\n"	\
"			return-type name(), 		---> ignore args \n"	\
"			return-type name(void), 	---> specify args as void\n"	\
"				(type, ...),			---> ignore return type and function name\n"	\
"				void (type, ...),   	---> ignore function name and specify return as void\n"	\
"				name(),				---> ignore return type and args \n"	\
"				name(void), 			---> ignore return type and specify args as void \n"	\
"				return-type (),		---> ignore function name and args \n"	\
"				return-type (void),	---> ignore function name and specify args as void\n"	\
"	name(type name, ...) -> return-type,\n"	\
"		name(type, ...) -> return-type,\n"	\
"			name(type, ...),\n"	\
"			name(type, ...) -> void,\n"	\
"			(type, ...) -> return-type,\n"	\
"			name() -> return-type,\n"	\
"			name(void) -> return-type,\n"	\
"				(type, ...),\n"	\
"				(type, ...) -> void,\n"	\
"				name(),\n"	\
"				name(void),\n"	\
"				() -> return-type,\n"	\
"				(void) -> return-type, \n"	\
"	return-type name(/4), ---> args number is 4\n"	\
